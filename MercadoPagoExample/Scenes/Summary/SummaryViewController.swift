//
//  SummaryViewController.swift
//  MercadoPagoExample
//
//  Created by Orlando Arzola on 1/27/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SummaryDisplayLogic: class {
    func displaySummary(viewModel: Summary.Summary.ViewModel)
}

class SummaryViewController: UIViewController, SummaryDisplayLogic {
    var interactor: SummaryBusinessLogic?
    var router: (NSObjectProtocol & SummaryRoutingLogic & SummaryDataPassing)?

    @IBOutlet weak var summaryTableView: UITableView!

    var displayedSummary = Summary.Summary.ViewModel.DisplayedSummary(installments: "", installmentValue: "", amount: "", totalAmount: "", paymentMethod: "", issuer: "") {
        didSet {
            summaryTableView.reloadData()
        }
    }
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SummaryInteractor()
        let presenter = SummaryPresenter()
        let router = SummaryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()
        interactor?.getSummary()
    }

    func setupViews() {
        title = "Summary"
        setupSummaryTableView()
    }

    func setupSummaryTableView() {
        summaryTableView.delegate = self
        summaryTableView.dataSource = self
        summaryTableView.tableFooterView = UIView()

        summaryTableView.register(UINib(nibName: "SummaryTableViewCell", bundle: nil), forCellReuseIdentifier: "summaryCell")
    }

    func displaySummary(viewModel: Summary.Summary.ViewModel) {
        displayedSummary = viewModel.displayedSummary
    }
    
    @IBAction func finishButtonPressed(_ sender: Any) {
        router?.routeToStart()
    }
}

extension SummaryViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 6
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "summaryCell", for: indexPath) as? SummaryTableViewCell else { return UITableViewCell() }

        switch indexPath.row {
        case 0:
            cell.setupCell(withTitle: "Requested Amount", value: displayedSummary.amount)
        case 1:
            cell.setupCell(withTitle: "Payment Method", value: displayedSummary.paymentMethod)
        case 2:
            cell.setupCell(withTitle: "Issuer", value: displayedSummary.issuer)
        case 3:
            cell.setupCell(withTitle: "Installments", value: displayedSummary.installments)
        case 4:
            cell.setupCell(withTitle: "Installment Value", value: displayedSummary.installmentValue)
        case 5:
            cell.setupCell(withTitle: "Total to Pay", value: displayedSummary.totalAmount)
        default:
            break
        }

        return cell
    }


}
