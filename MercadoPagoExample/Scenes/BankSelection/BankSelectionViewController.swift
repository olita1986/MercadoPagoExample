//
//  BankSelectionViewController.swift
//  MercadoPagoExample
//
//  Created by Orlando Arzola on 1/27/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JGProgressHUD

protocol BankSelectionDisplayLogic: class {
    func displayView(viewModel: BankSelection.BankIssuers.ViewModel)
    func displayLoading()
    func dismissLoading()
    func displayInstallments()
    func displayError(viewModel: BankSelection.Error.ViewModel)
}

class BankSelectionViewController: UIViewController, BankSelectionDisplayLogic {
    var interactor: BankSelectionBusinessLogic?
    var router: (NSObjectProtocol & BankSelectionRoutingLogic & BankSelectionDataPassing)?

    @IBOutlet weak var bankIssuersTableView: UITableView!

    let hud = JGProgressHUD(style: .dark)
    
    var displayedBankIssuersArray = [BankSelection.BankIssuers.ViewModel.DisplayedBankIssuers]() {
        didSet {
            
        }
    }

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = BankSelectionInteractor()
        let presenter = BankSelectionPresenter()
        let router = BankSelectionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()
        interactor?.getBankIssuers()
    }

    private func setupViews() {
        title = "Issuers"
        setupBankIssuersTableView()
    }

    private func setupBankIssuersTableView() {
        bankIssuersTableView.delegate = self
        bankIssuersTableView.dataSource = self

        bankIssuersTableView.register(UINib(nibName: "StandardTableViewCell", bundle: nil), forCellReuseIdentifier: "bankIssuerCell")
    }

    func displayView(viewModel: BankSelection.BankIssuers.ViewModel) {
        displayedBankIssuersArray = viewModel.diplayedBankIssuersArray
    }

    func displayLoading() {
        hud.textLabel.text = "Loading"
        hud.show(in: view)
    }

    func dismissLoading() {
        hud.dismiss()
    }

    func displayError(viewModel: BankSelection.Error.ViewModel) {
        let alert = UIAlertController(title: viewModel.title, message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }

    func displayInstallments() {
        router?.routeToInstallments()
    }
}

extension BankSelectionViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedBankIssuersArray.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let bankIssuer = displayedBankIssuersArray[indexPath.row]
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "bankIssuerCell", for: indexPath) as? StandardTableViewCell else { return UITableViewCell()}

        cell.setupCell(withOption: bankIssuer)

        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let request = BankSelection.Installment.Request(index: indexPath.row)
        interactor?.getInstallments(request: request)
    }
}
