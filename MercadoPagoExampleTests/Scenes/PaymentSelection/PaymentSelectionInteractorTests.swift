//
//  PaymentSelectionInteractorTests.swift
//  MercadoPagoExample
//
//  Created by Orlando Arzola on 1/29/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import MPEDebug
import XCTest

class PaymentSelectionInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: PaymentSelectionInteractor!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupPaymentSelectionInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupPaymentSelectionInteractor() {
        sut = PaymentSelectionInteractor()
    }

    // MARK: Tests

    func testGetPaymentMethodsErrorCase() {
        // Given
        let presenterSpy = PaymentSelectionPresentationLogicSpy()
        let mpeApiSpy = MPEApiSpy(isError: true)
        sut = PaymentSelectionInteractor(mpeApi: mpeApiSpy)
        sut.presenter = presenterSpy

        // When
        sut.getPaymentMethods()

        // Then
        XCTAssertTrue(presenterSpy.presentLoadingCalled, "loading view should be presented")
        XCTAssertTrue(mpeApiSpy.getPaymentMethodsCalled, "api should be called")
        XCTAssertTrue(presenterSpy.dismissLoadingCalled, "loading view should be dismissed")
        XCTAssertTrue(presenterSpy.presentErrorCalled, "error should be presented")
    }

    func testGetPaymentMethodsSuccessCase() {
        // Given
        let presenterSpy = PaymentSelectionPresentationLogicSpy()
        let mpeApiSpy = MPEApiSpy()
        sut = PaymentSelectionInteractor(mpeApi: mpeApiSpy)
        sut.presenter = presenterSpy

        // When
        sut.getPaymentMethods()

        // Then
        XCTAssertTrue(presenterSpy.presentLoadingCalled, "loading view should be presented")
        XCTAssertTrue(mpeApiSpy.getPaymentMethodsCalled, "api should be called")
        XCTAssertTrue(presenterSpy.dismissLoadingCalled, "loading view should be dismissed")
        XCTAssertTrue(presenterSpy.presentViewCalled, "view should be presented")
    }

    func testGetIssuersErrorCase() {
        // Given
        let presenterSpy = PaymentSelectionPresentationLogicSpy()
        let mpeApiSpy = MPEApiSpy(isError: true)
        sut = PaymentSelectionInteractor(mpeApi: mpeApiSpy)
        sut.presenter = presenterSpy
        sut.paymentMethods = PaymentMethodsResponseFactory.generateModel()

        // When
        let request = PaymentSelection.BankIssuers.Request(index: 0)
        sut.getBankIssuers(request: request)

        // Then
        XCTAssertTrue(presenterSpy.presentLoadingCalled, "loading view should be presented")
        XCTAssertTrue(mpeApiSpy.getIssuersCalled, "api should be called")
        XCTAssertTrue(presenterSpy.dismissLoadingCalled, "loading view should be dismissed")
        XCTAssertTrue(presenterSpy.presentErrorCalled, "error should be presented")
    }

    func testGetIssuersSuccessCase() {
        // Given
        let presenterSpy = PaymentSelectionPresentationLogicSpy()
        let mpeApiSpy = MPEApiSpy()
        sut = PaymentSelectionInteractor(mpeApi: mpeApiSpy)
        sut.presenter = presenterSpy
        sut.paymentMethods = PaymentMethodsResponseFactory.generateModel()

        // When
        let request = PaymentSelection.BankIssuers.Request(index: 0)
        sut.getBankIssuers(request: request)

        // Then
        XCTAssertTrue(presenterSpy.presentLoadingCalled, "loading view should be presented")
        XCTAssertTrue(mpeApiSpy.getIssuersCalled, "api should be called")
        XCTAssertTrue(presenterSpy.dismissLoadingCalled, "loading view should be dismissed")
        XCTAssertTrue(presenterSpy.presentBankIssuersCalled, "bank issuers view should be presented")
    }

}
