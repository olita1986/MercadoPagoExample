//
//  PaymentSelectionPresenterTests.swift
//  MercadoPagoExample
//
//  Created by Orlando Arzola on 1/29/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import MPEDebug
import XCTest

class PaymentSelectionPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: PaymentSelectionPresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupPaymentSelectionPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupPaymentSelectionPresenter() {
        sut = PaymentSelectionPresenter()
    }

    // MARK: Tests

    func testPresentLoading() {
        // Given
        let viewSpy = PaymentSelectionDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        sut.presentLoading()

        // Then
        XCTAssertTrue(viewSpy.displayLoadingCalled, "loading should be displayed")
    }

    func testDismissLoading() {
        // Given
        let viewSpy = PaymentSelectionDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        sut.dismissLoading()

        // Then
        XCTAssertTrue(viewSpy.dismissLoadingCalled, "loading should be dismissed")
    }

    func testPresentView() {
        // Given
        let viewSpy = PaymentSelectionDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        let response = PaymentSelection.PaymentMethods.Response(paymentMethods: PaymentMethodsResponseFactory.generateModel())
        sut.presentView(response: response)

        // Then
        XCTAssertTrue(viewSpy.displayViewCalled, "view should be displayed")
    }

    func testPresentBankIssuers() {
        // Given
        let viewSpy = PaymentSelectionDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        sut.presentBankIssuers()

        // Then
        XCTAssertTrue(viewSpy.displayBankIssuersCalled, "bank issuers should be displayed")
    }

    func testPresentError() {
        // Given
        let viewSpy = PaymentSelectionDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        sut.presentError()

        // Then
        XCTAssertTrue(viewSpy.displayErrorCalled, "error should be displayed")
    }

}
