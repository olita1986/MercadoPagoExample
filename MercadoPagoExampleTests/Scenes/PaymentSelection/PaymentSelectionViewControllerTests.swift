//
//  PaymentSelectionViewControllerTests.swift
//  MercadoPagoExample
//
//  Created by Orlando Arzola on 1/29/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import MPEDebug
import XCTest
import JGProgressHUD

class PaymentSelectionViewControllerTests: XCTestCase {
    // MARK: Subject under test
    var sut: PaymentSelectionViewController!
    var window: UIWindow!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupPaymentSelectionViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    
    func setupPaymentSelectionViewController() {
        sut = PaymentSelectionViewController()
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }


    // MARK: Tests

    func testShouldGetPaymethodsWhenViewIsLoaded() {
        // Given
        let spy = PaymentSelectionBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.getPaymentMethodsCalled, "viewDidLoad() should ask the interactor to get payment methods")
    }

    func testDisplayLoading() {
        // Given
        let spy = PaymentSelectionBusinessLogicSpy()
        let hudSpy = HUDSpy()
        sut.interactor = spy
        sut.hud = hudSpy
        loadView()

        // When
        sut.displayLoading()

        // Then
        XCTAssertTrue(hudSpy.showCalled, "a hud should be shown")
    }

    func testDismissLoading() {
        // Given
        let spy = PaymentSelectionBusinessLogicSpy()
        let hudSpy = HUDSpy()
        sut.interactor = spy
        sut.hud = hudSpy
        loadView()

        // When
        sut.dismissLoading()

        // Then
        XCTAssertTrue(hudSpy.dismissCalled, "a hud should be dismissed")
    }

    func testDisplayView() {
        // Given
        loadView()
        
        // When
        let viewModel = PaymentSelection.PaymentMethods.ViewModel(displayedPaymentMethodsArray: [PaymentSelection.PaymentMethods.ViewModel.DisplayedPaymentMethods(name: "Visa", imageURL: "url")])
        sut.displayView(viewModel: viewModel)

        // Then
        XCTAssertTrue(sut.displayedPaymentMethodsArray.count == 1)
    }

    func testDisplayBankIssuers() {
        // Given
        let routerSpy = PaymentSelectionRoutingLogicSpy()
        sut.router = routerSpy

        // When
        sut.displayBankIssuers()

        // Then
        XCTAssertTrue(routerSpy.routeToBankIssuersCalled, "route to bank issuers should be called")
    }

    func testDisplayError() {
        // Given
        let sut = PaymentSelectionViewControllerSpy()

        // When
        let viewModel = PaymentSelection.Error.ViewModel(title: "title", message: "message")
        sut.displayError(viewModel: viewModel)

        // Then
        XCTAssertTrue(sut.presentCalled)
    }

    func testDidSelectRow() {
        // Given
        let spy = PaymentSelectionBusinessLogicSpy()
        sut.interactor = spy
        loadView()

        // When
        sut.tableView(sut.paymentMethodsTableView, didSelectRowAt: IndexPath(row: 0, section: 0))

        // Then
        XCTAssertTrue(spy.getBankIssuersCalled, "get bank issuers should be called")
    }

    func testCellForRow() {
        // Given
        loadView()
        sut.displayedPaymentMethodsArray = [PaymentSelection.PaymentMethods.ViewModel.DisplayedPaymentMethods(name: "visa", imageURL: "url")]

        // When
        let cell = sut.tableView(sut.paymentMethodsTableView, cellForRowAt: IndexPath(row: 0, section: 0)) as! StandardTableViewCell

        // Then
        XCTAssertTrue(cell.optionTitleLabel.text == "visa")
    }
}

class HUDSpy: JGProgressHUD {
    var showCalled = false
    var dismissCalled = false

    override func show(in view: UIView) {
        showCalled = true
    }

    override func dismiss() {
        dismissCalled = true
    }
}

class PaymentSelectionViewControllerSpy:  PaymentSelectionViewController {
    var presentCalled = false
    override func present(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -> Void)? = nil) {
        presentCalled = true
    }
}
